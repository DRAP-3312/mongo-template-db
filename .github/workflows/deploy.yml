name: Deploy MongoDB to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add VPS to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Create project directory
          export DEPLOY_DIR="/home/${{ secrets.VPS_USER }}/workspace/mongo-template-db"
          mkdir -p $DEPLOY_DIR
          cd $DEPLOY_DIR

          # Create certificate directory
          mkdir -p certs
          
          # Generate CA
          openssl genrsa -out certs/ca.key 4096
          openssl req -new -x509 -days 365 -key certs/ca.key -out certs/ca.pem -subj "/CN=MongoDB-CA"

          # Generate Server Certificate
          openssl genrsa -out certs/server.key 4096
          openssl req -new -key certs/server.key -out certs/server.csr -subj "/CN=${{ secrets.DOMAIN }}"
          openssl x509 -req -days 365 -in certs/server.csr -CA certs/ca.pem -CAkey certs/ca.key -CAcreateserial -out certs/server.crt
          
          # Combine server key and cert for MongoDB
          cat certs/server.crt certs/server.key > certs/server.pem

          # Set permissions
          sudo chmod -R 644 certs
          sudo chmod 755 certs
          sudo chmod 600 certs/ca.key
          sudo chmod 600 certs/server.key

          # Create mongod.conf
          cat << EOF > mongod.conf
          net:
            port: 27017
            bindIp: 0.0.0.0
            tls:
              mode: requireTLS
              certificateKeyFile: /etc/ssl/mongo/server.pem
              CAFile: /etc/ssl/mongo/ca.pem
              setParameter:
                tlsCipherSuite: "TLS_AES_256_GCM_SHA384"
          storage:
            dbPath: /data/db
            journal:
              enabled: true
          systemLog:
            destination: stdout
          EOF
          
          # Create .deploy directory
          mkdir -p .deploy

          # Create deploy-stack.yml with absolute paths
          cat << EOF > .deploy/deploy-stack.yml
          services:
            mongodb:
              image: mongo:7.0
              environment:
                MONGO_INITDB_ROOT_USERNAME: \${MONGO_ROOT_USERNAME}
                MONGO_INITDB_ROOT_PASSWORD: \${MONGO_ROOT_PASSWORD}
                MONGO_INITDB_DATABASE: \${MONGO_DATABASE}
              volumes:
                - ${DEPLOY_DIR}/certs:/etc/ssl/mongo
                - ${DEPLOY_DIR}/mongod.conf:/etc/mongod.conf
                - mongodb_data:/data/db
              ports:
                - "27017:27017"
              networks:
                - caddy
              command: mongod --config /etc/mongod.conf
              deploy:
                replicas: 1
                resources:
                  limits:
                    memory: 1G
                  reservations:
                    memory: 512M
          volumes:
            mongodb_data:
              driver: local
          networks:
            caddy:
              external: true
          EOF

          echo ">>> Removing previous stack..."
          docker stack rm mongodb 2>/dev/null || true
          sleep 10
          
          echo ">>> Deploying MongoDB Stack..."
          docker stack deploy -c .deploy/deploy-stack.yml mongodb
          
          echo ">>> Waiting for service to start (20 seconds)..."
          sleep 20
          
          echo ">>> Checking service status..."
          docker service ls
          
          echo ">>> Displaying service logs..."
          docker service logs mongodb_mongodb || echo "Could not retrieve logs, service might be starting."

          echo ">>> MongoDB deployment completed!"
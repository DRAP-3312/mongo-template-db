name: Deploy MongoDB to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add VPS to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Create directory if it doesn't exist
          mkdir -p /home/${{ secrets.VPS_USER }}/workspace/mongo-template-db
          cd /home/${{ secrets.VPS_USER }}/workspace/mongo-template-db

          # Clean up duplicate .deploy directories
          echo ">>> Cleaning up duplicate directories..."
          rm -rf .deploy/.deploy
          
          # Create .deploy directory if it doesn't exist
          mkdir -p .deploy

          # Create certificate directory
          mkdir -p certs

          # Generate CA and server certificates if they don't exist
          if [ ! -f "certs/ca.pem" ]; then
            echo ">>> Generating CA and server certificates..."
            
            # Generate CA private key
            openssl genrsa -out certs/ca.key 4096
            
            # Generate CA certificate
            openssl req -new -x509 -days 3650 -key certs/ca.key -out certs/ca.pem \
              -subj "/C=US/ST=CA/L=SF/O=MyOrg/OU=Dev/CN=MongoDB-CA"
            
            # Generate server private key
            openssl genrsa -out certs/server.key 4096
            
            # Create server certificate signing request
            openssl req -new -key certs/server.key -out certs/server.csr \
              -subj "/C=US/ST=CA/L=SF/O=MyOrg/OU=Dev/CN=${{ secrets.DOMAIN }}"
            
            # Sign server certificate with CA
            openssl x509 -req -in certs/server.csr -CA certs/ca.pem -CAkey certs/ca.key \
              -CAcreateserial -out certs/server.crt -days 3650
            
            # Combine server certificate and key
            cat certs/server.crt certs/server.key > certs/server.pem
            
            # Clean up intermediate files
            rm certs/server.csr certs/server.crt certs/server.key
          fi
            
          echo ">>> Setting permissions for certificates..."
          chmod 755 certs
          chmod 644 certs/*.pem
          chmod 600 certs/ca.key

          # Create mongod.conf
          cat > mongod.conf << 'MONGOEOF'
          net:
            port: 27017
            bindIpAll: true
            tls:
              mode: requireTLS
              certificateKeyFile: /etc/ssl/mongo/server.pem
              CAFile: /etc/ssl/mongo/ca.pem
          storage:
            dbPath: /data/db
          systemLog:
            destination: file
            path: /data/db/mongod.log
            logAppend: true
          MONGOEOF

          # Create .env file from secrets
          cat > .env << 'ENVEOF'
          MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }}
          MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
          MONGO_DATABASE=${{ secrets.MONGO_DATABASE }}
          DOMAIN=${{ secrets.DOMAIN }}
          CADDY_EMAIL=${{ secrets.CADDY_EMAIL }}
          ENVEOF

          # Create deploy-stack.yml with absolute paths
          cat > .deploy/deploy-stack.yml << 'STACKEOF'
          services:
            mongodb:
              image: mongo:7.0
              environment:
                MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
                MONGO_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
                MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
              volumes:
                - mongodb_data:/data/db
                - /home/${{ secrets.VPS_USER }}/workspace/mongo-template-db/certs:/etc/ssl/mongo
                - /home/${{ secrets.VPS_USER }}/workspace/mongo-template-db/mongod.conf:/etc/mongod.conf
              ports:
                - "27017:27017"
              networks:
                - caddy
              command: mongod --config /etc/mongod.conf
              deploy:
                replicas: 1
                resources:
                  limits:
                    memory: 1G
                  reservations:
                    memory: 512M

          volumes:
            mongodb_data:
              driver: local

          networks:
            caddy:
              external: true
          STACKEOF

          echo ">>> Removing old stack if exists..."
          docker stack rm mongodb || true
          sleep 10

          echo ">>> Deploying MongoDB stack..."
          docker stack deploy -c .deploy/deploy-stack.yml mongodb

          echo ">>> Waiting for service update (20 seconds)..."
          sleep 20

          echo ">>> Checking service status..."
          docker service ls | grep mongodb || echo "No mongodb service found"

          echo ">>> Checking MongoDB service logs..."
          docker service logs mongodb_mongodb --tail 50 || echo "Could not retrieve logs for service."

          echo ">>> MongoDB deployment completed!"
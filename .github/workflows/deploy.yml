name: Deploy MongoDB to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add VPS to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /home/${{ secrets.VPS_USER }}/workspace/mongo-template-db

          # Create certificate directory
          mkdir -p certs

          # Generate self-signed certificate if it doesn't exist
          if [ ! -f "certs/server.pem" ]; then
            echo ">>> Generating self-signed TLS certificate..."
            openssl req -x509 -newkey rsa:4096 -sha256 -days 3650 -nodes \
              -keyout certs/server.pem -out certs/server.pem \
              -subj "/C=US/ST=CA/L=SF/O=MyOrg/OU=Dev/CN=${{ secrets.DOMAIN }}"
            
            echo ">>> Setting permissions for certificate..."
            chmod 755 certs
            chmod 644 certs/server.pem
          fi

          # Create .env file from secrets
          cat > .env << 'ENVEOF'
          MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }}
          MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
          MONGO_DATABASE=${{ secrets.MONGO_DATABASE }}
          DOMAIN=${{ secrets.DOMAIN }}
          CADDY_EMAIL=${{ secrets.CADDY_EMAIL }}
          ENVEOF

          echo ">>> Removing old stack if exists..."
          docker stack rm mongodb || true
          sleep 10

          echo ">>> Deploying MongoDB stack..."
          docker stack deploy -c .deploy/deploy-stack.yml mongodb

          echo ">>> Waiting for service update (20 seconds)..."
          sleep 20

          echo ">>> Checking service status..."
          docker service ls | grep mongodb || echo "No mongodb service found"

          echo ">>> Checking MongoDB service logs..."
          docker service logs mongodb_mongodb --tail 50 || echo "Could not retrieve logs for service."

          echo ">>> MongoDB deployment completed!"